-- IMPORTS

import XMonad
import Data.Monoid
import System.Exit --(exitSuccess)
import System.IO --(hPutStrLn)
import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Util.EZConfig --(additionalKeysP)
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
--import XMonad.Hooks.StatusBar
--import XMonad.Hooks.StatusBar.PP
--import XMonad.Layout.Fullscreen
import XMonad.Layout.Grid
import XMonad.Layout.Spacing
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Renamed
import qualified XMonad.StackSet as W
import qualified Data.Map        as M


-- VARIABLES

windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

myTerminal :: String
myTerminal = "alacritty" -- Default terminal

myBrowser :: String
myBrowser = "firefox" -- Default browser

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True -- Changes focus to window mouse is over

myClickJustFocuses :: Bool
myClickJustFocuses = False -- I do not know

myBorderWidth :: Dimension
myBorderWidth = 1 -- Default width of window borders

myModMask :: KeyMask
myModMask = mod4Mask -- Changes modifier key

myNormalBorderColor :: String
myNormalBorderColor  = "#dddddd" -- Default border color

myFocusedBorderColor :: String
myFocusedBorderColor = "#ffe100" -- Default border color when focused

myEditor :: String
myEditor = myTerminal ++ " -e vim " -- Default editor

myKeys :: [(String, X ())]
myKeys =

  [ ("M-q", spawn "xmonad --recompile; xmonad --restart")       -- Recompile and restart XMonad
  , ("M-S-q", io exitSuccess)             -- Exit XMonad
  , ("M-b", spawn "killall xmobar; xmonad --restart") -- Restart XMobar
  , ("M-S-c", kill)                -- Kill current window
  , ("M-S-<Return>", spawn (myTerminal))            -- Spawn terminal
  , ("M-p", spawn "dmenu_run -i -p \"Run: \"")              -- Spawn dmenu
  , ("M-<Tab>", sendMessage NextLayout)           -- Change layout to next available
  , ("M-j", windows W.focusDown)              -- Change focus to next window
  , ("M-k", windows W.focusUp)              -- Change focus to previous window
  , ("M-2 <Return>", spawn (myBrowser ++ " https://www.youtube.com/watch?v=O3sR2ZN0oRY"))
 ]

--mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
--mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

--dflt = renamed [Replace "Grid"]
--zoom = renamed [Replace "Full"]

myLayout = avoidStruts $ spacingRaw True (Border 8 8 8 8) True (Border 8 8 8 8) True $ myDefaultLayout
    where
        myDefaultLayout = (Grid ||| Full)
        
myEventHook = docksEventHook <+> fullscreenEventHook

myWorkspaces = ["sys", "music", "1", "2", "3", "4", "5", "6", "7"]

myStartupHook = do
  spawnOnce "nitrogen --restore &"
  spawnOnce "picom &"
  setWMName "LG3D" 


main = do 
  xmproc <- spawnPipe "xmobar -x 0 /home/swebb/.config/xmobar/.xmobarrc"
  xmonad $ ewmh $ def {

          terminal           = myTerminal,
          focusFollowsMouse  = myFocusFollowsMouse,
          clickJustFocuses   = myClickJustFocuses,
          borderWidth        = myBorderWidth,
          modMask            = myModMask,
          normalBorderColor  = myNormalBorderColor,
          focusedBorderColor = myFocusedBorderColor,
          workspaces         = myWorkspaces,
          -- hooks, layouts
          startupHook        = myStartupHook
          layoutHook         = myLayout,
          handleEventHook    = myEventHook,
          logHook            = dynamicLogWithPP $ xmobarPP
            { ppOutput = hPutStrLn xmproc
            , ppCurrent = xmobarColor "#FFFFFF" "" . wrap "*" "*"
            , ppVisible = xmobarColor "#FFFFFF" ""
            , ppHidden = xmobarColor "#FFFFFF" ""
            , ppHiddenNoWindows = xmobarColor "#FFFFFF" ""
            , ppTitle = xmobarColor "#FFFFFF" ""
            , ppSep = "<fc=#FFFFFF> <fn=1>|</fn> </fc>"
            , ppUrgent = xmobarColor "#FFFFFF" "" . wrap "!" "!"
            , ppExtras = [windowCount]
            , ppOrder = \(ws:l:t:ex) -> [ws,l]++ex++[t]
            }
      } `additionalKeysP` myKeys
